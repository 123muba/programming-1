//Exercise 2.1
#include<iostream>
using namespace std;
int main(){
	int M,N,O;
	int result;
	cout <<"enter three integers:";
	cin>> M >> N >> O;
	result = M * N * O; 
	cout <<"The product is" << result << endl;
	return 0;// 
}
//Exercise 2.2
#include<iostream>
using namespace std;
int main(){
	int x,y; 
	int sum,sub,mul,div,rem;
	cout<<" accept two integers"<<endl;
	cin>>x>>y; 
	 sum=x+y;
	sub=x-y;
	mul=x*y;
	div=x/y;
	cout<<sum<<endl<<sub<<endl<<mul<<endl<<div<<endl;
	cout<<"the smallest integer is"<<x<<endl;
cout<<"the greater integer is "<<y<<endl;
		return 0;
}
//Exercise 2.3
#include<iostream>
using namespace std;
#define PI 3.14149
int main(){
	float radius,area,circum;
	 cout<<"\n \n find the area and circumference of any circle:";
	 cout<<"---------------------------------------------------\n";
	 cout<<"Input the radius(1/2 of diameter) of a circle:";
	 cin >> radius;
	 circum = 2*PI*radius;
	 area = PI*(radius*radius);
	 cout<<"The area of the circle is:"<< area<<endl;
	 cout<<"The circumference of the circle is :"<<circum<<endl;
	 cout<<endl;
	 return 0;
}
//Exercise 2.4
#include <iostream>
#include <cmath>
using namespace std;

int main() {

    float a, b, c, x1, x2, discriminant, realPart, imaginaryPart;
    cout << "Enter coefficients a, b and c: ";
    cin >> a >> b >> c;
    discriminant = b*b - 4*a*c;
    
    if (discriminant > 0) {
        x1 = (-b + sqrt(discriminant)) / (2*a);
        x2 = (-b - sqrt(discriminant)) / (2*a);
        cout << "Roots are real and different." << endl;
        cout << "x1 = " << x1 << endl;
        cout << "x2 = " << x2 << endl;
    }
    
    else if (discriminant == 0) {
        cout << "Roots are real and same." << endl;
        x1 = -b/(2*a);
        cout << "x1 = x2 =" << x1 << endl;
    }

    else {
        realPart = -b/(2*a);
        imaginaryPart =sqrt(-discriminant)/(2*a);
        cout << "Roots are complex and different."  << endl;
        cout << "x1 = " << realPart << "+" << imaginaryPart << "i" << endl;
        cout << "x2 = " << realPart << "-" << imaginaryPart << "i" << endl;
    }

    return 0;
}

